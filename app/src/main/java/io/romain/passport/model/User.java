package io.romain.passport.model;

import android.net.Uri;
import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;

import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;

import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Multipart;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Part;
import retrofit2.http.Path;
import rx.Observable;

// This is not a persistable model since it will be saved onto the account manager;
public class User implements Parcelable {
	// api endpoint
	private static final String MODULE = "/users";

	// endpoints
	private static final String POST_FILE = "/pictures/upload";
	private static final String POST_REGISTER = MODULE + "/register";
	private static final String GET_LOGIN = MODULE + "/login";
	private static final String PUT_GCM = MODULE + "/gcm/{gcm_token}";

	@Expose
	@SerializedName("_id")
	public String id;

	@Expose
	@SerializedName("name")
	public String name;

	@Expose
	@SerializedName("email")
	public String email;

	@Expose
	@SerializedName("token")
	public String token;

	@Expose
	@SerializedName("password")
	public String password;

	@Expose
	@SerializedName("picture")
	public Uri picture;

	public interface UserService {

		@POST(POST_REGISTER)
		Observable<User> register(@Body User user);

		@GET(GET_LOGIN)
		Observable<User> login(@Header("Authorization") String basic);

		@GET(GET_LOGIN)
		Call<User> login(@Header("Authorization") String basic, boolean async);

		@Multipart
		@POST(POST_FILE)
		Observable<User> upload(@Header("Authorization") String auth, @Part("file\"; filename=\"image.png\"") RequestBody file);

		@PUT(PUT_GCM)
		Call<User> registerGcm(@Path("gcm_token") String token);
	}

	// ############### AUTOGENERATED STUFFS
	@Override
	public String toString() {
		return "User{" +
				"name='" + name + '\'' +
				", email='" + email + '\'' +
				", password='" + (TextUtils.isEmpty(password) ? "empty" : "<redacted>" )+ '\'' +
				", picture=" + picture +
				'}';
	}

	@Override
	public int describeContents() {
		return 0;
	}

	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeString(this.id);
		dest.writeString(this.name);
		dest.writeString(this.email);
		dest.writeString(this.token);
		dest.writeString(this.password);
		dest.writeParcelable(this.picture, 0);
	}

	private User(Parcel in) {
		this.id = in.readString();
		this.name = in.readString();
		this.email = in.readString();
		this.token = in.readString();
		this.password = in.readString();
		this.picture = in.readParcelable(Uri.class.getClassLoader());
	}

	protected User() {
		super();
	}

	public User(String name, String email, String password, Uri picture) {
		this.name = name;
		this.email = email;
		this.password = password;
		this.picture = picture;
	}

	public static final Creator<User> CREATOR = new Creator<User>() {
		public User createFromParcel(Parcel source) {
			return new User(source);
		}

		public User[] newArray(int size) {
			return new User[size];
		}
	};
}
